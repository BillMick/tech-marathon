print("""The process in which a function calls itself directly or indirectly is called 
recursion and the corresponding function is called a recursive function. Using 
a recursive algorithm, certain problems can be solved quite easily. Examples of
such problems are Towers of Hanoi (TOH), Inorder/Preorder/Postorder Tree Traversals, 
DFS of Graph, etc. A recursive function solves a particular problem by calling a 
copy of itself and solving smaller subproblems of the original problems. Many
more recursive calls can be generated as and when required. It is essential to know
that we should provide a certain case in order to terminate this recursion process.
So we can say that every time the function calls itself with a simpler version of 
the original problem.""")

print("""How are recursive functions stored in memory?
Recursion uses more memory, because the recursive function adds to the stack with
each recursive call, and keeps the values there until the call is finished. The 
recursive function uses LIFO (LAST IN FIRST OUT) Structure just like the stack data
structure.""")

print("""What is the base condition in recursion? 
In the recursive program, the solution to the base case is provided and the solution
to the bigger problem is expressed in terms of smaller problems. """)

print("""Why Stack Overflow error occurs in recursion? 
If the base case is not reached or not defined, then the stack overflow problem may 
arise. Let us take an example to understand this.""")

print("""What is the difference between direct and indirect recursion? 
A function fun is called direct recursive if it calls the same function fun.
A function fun is called indirect recursive if it calls another function say fun_new 
and fun_new calls fun directly or indirectly.""")

print("""What is the difference between tailed and non-tailed recursion? 
A recursive function is tail recursive when a recursive call is the last thing executed
by the function.""")

print("""How memory is allocated to different function calls in recursion? 
When any function is called from main(), the memory is allocated to it on the stack.
A recursive function calls itself, the memory for a called function is allocated on top 
of memory allocated to the calling function and a different copy of local variables is
created for each function call. When the base case is reached, the function returns its
value to the function by whom it is called and memory is de-allocated and the process 
continues.""")

print()

print(""" ######### A Python 3 program to demonstrate working of recursion ######### """)
  
  
def printFun(test): 
  
    if (test < 1): 
        return
    else: 
  
        print(test, end=" ") 
        printFun(test-1)  # statement 2 
        print(test, end=" ") 
        return
  
# Driver Code 
test = 3
printFun(test) 

print()
print()

print("""Example:  Real Applications of Recursion in real problems
Recursion is a powerful technique that has many applications in computer science and programming. Here are some of the common applications of recursion:
Tree and graph traversal: Recursion is frequently used for traversing and searching data structures such as trees and graphs. Recursive algorithms can be used to explore all the nodes or vertices of a tree or graph in a systematic way.
Sorting algorithms: Recursive algorithms are also used in sorting algorithms such as quicksort and merge sort. These algorithms use recursion to divide the data into smaller subarrays or sublists, sort them, and then merge them back together.
Divide-and-conquer algorithms: Many algorithms that use a divide-and-conquer approach, such as the binary search algorithm, use recursion to break down the problem into smaller subproblems.
Fractal generation: Fractal shapes and patterns can be generated using recursive algorithms. For example, the Mandelbrot set is generated by repeatedly applying a recursive formula to complex numbers.
Backtracking algorithms: Backtracking algorithms are used to solve problems that involve making a sequence of decisions, where each decision depends on the previous ones. These algorithms can be implemented using recursion to explore all possible paths and backtrack when a solution is not found.
Memoization: Memoization is a technique that involves storing the results of expensive function calls and returning the cached result when the same inputs occur again. Memoization can be implemented using recursive functions to compute and cache the results of subproblems.
These are just a few examples of the many applications of recursion in computer science and programming. Recursion is a versatile and powerful tool that can be used to solve many different types of problems.
""")

print()

print("""Summary of Recursion:
· There are two types of cases in recursion i.e. recursive case and a base case.
· The base case is used to terminate the recursive function when the case turns out to be true.
· Each recursive call makes a new copy of that method in the stack memory.
· Infinite recursion may lead to running out of stack memory.
· Examples of Recursive algorithms: Merge Sort, Quick Sort, Tower of Hanoi, Fibonacci Series, Factorial Problem, etc.""")